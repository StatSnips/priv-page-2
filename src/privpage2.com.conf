# Example configuration file for running nginx
# Should be moved to /etc/nginx/sites-available
# Certbot should make modifications

# Catch http and enforce https
server {
    listen 80;
    server_name privpage2.com;
    # enforce https
    return 301 https://$server_name:443$request_uri;
}

# Catch www subdomain
server {
    listen 80;
    listen 443 ssl;

    server_name www.privpage2.com;
    # Return preferred over rewrite
    # Enforce https
    return 301 $https://privpage2.com$request_uri;
}

# Catch github subdomain (should not be needed)
server {
    listen 80;
    listen 443 ssl;

    server_name github.privpage2.com;
    return 301 $https://privpage2.com$request_uri;
}

# Catch mispelled servers incoming to IP address
server {
    listen 80 default_server;
    listen 443 ssl default_server;

    server_name _;
    return 301 $https://www.privpage.com;
}

# Main chunk
server {
    listen 443 ssl http2;
    server_name privpage2.com;

    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        # Websocket proxying
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        # May not need
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
        # Conditions for ignore cached version
        proxy_cache_bypass $http_upgrade;
    }
}

# Main for wildcard domain
server {
    listen 443 ssl http2;
    server_name *.github.privpage2.com;

    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        # Websocket proxying
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        # May not need
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
        # Conditions for ignore cached version
        proxy_cache_bypass $http_upgrade;
    }
}